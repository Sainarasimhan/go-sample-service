// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package test

import (
	"context"
	"github.com/Sainarasimhan/sample/pkg/endpoints"
	"github.com/Sainarasimhan/sample/pkg/repository"
	"github.com/Sainarasimhan/sample/pkg/sample"
	"github.com/google/wire"
)

// Injectors from test.go:

func GetBaseDeps() (sample.BaseDependencies, func(), error) {
	cfg, err := sample.ProvideCfg()
	if err != nil {
		return sample.BaseDependencies{}, nil, err
	}
	logger := sample.ProvideLog(cfg)
	openTelemetryExporters, cleanup, err := sample.ProvideTracer(logger)
	if err != nil {
		return sample.BaseDependencies{}, nil, err
	}
	metricInstruments, cleanup2, err := sample.ProvideMetricInstruments(logger, openTelemetryExporters)
	if err != nil {
		cleanup()
		return sample.BaseDependencies{}, nil, err
	}
	baseDependencies := sample.BaseDependencies{
		Logger:                 logger,
		Cfg:                    cfg,
		MetricInstruments:      metricInstruments,
		OpenTelemetryExporters: openTelemetryExporters,
	}
	return baseDependencies, func() {
		cleanup2()
		cleanup()
	}, nil
}

func GetTestEndpoint() (endpoints.Endpoints, func(), error) {
	cfg, err := sample.ProvideCfg()
	if err != nil {
		return endpoints.Endpoints{}, nil, err
	}
	logger := sample.ProvideLog(cfg)
	openTelemetryExporters, cleanup, err := sample.ProvideTracer(logger)
	if err != nil {
		return endpoints.Endpoints{}, nil, err
	}
	metricInstruments, cleanup2, err := sample.ProvideMetricInstruments(logger, openTelemetryExporters)
	if err != nil {
		cleanup()
		return endpoints.Endpoints{}, nil, err
	}
	baseDependencies := sample.BaseDependencies{
		Logger:                 logger,
		Cfg:                    cfg,
		MetricInstruments:      metricInstruments,
		OpenTelemetryExporters: openTelemetryExporters,
	}
	repository := _wireTestRepoValue
	service, err := sample.ProvideService(baseDependencies, repository)
	if err != nil {
		cleanup2()
		cleanup()
		return endpoints.Endpoints{}, nil, err
	}
	endpointsEndpoints, err := sample.ProvideEndpoint(baseDependencies, service)
	if err != nil {
		cleanup2()
		cleanup()
		return endpoints.Endpoints{}, nil, err
	}
	return endpointsEndpoints, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireTestRepoValue = new(TestRepo)
)

// test.go:

var (
	TestSet = wire.NewSet(sample.BaseDeps, wire.InterfaceValue(new(repo.Repository), new(TestRepo)), sample.ProvideService, sample.ProvideEndpoint)
)

// test implementation of repo layer
type TestRepo []repo.Details

func (t *TestRepo) Insert(_ context.Context, req repo.Request) (repo.Response, error) {
	*t = append(*t, repo.Details{
		ID:     req.ID,
		Param1: req.Param1,
		Param2: req.Param2,
		Param3: req.Param3,
	})
	return repo.Response{}, nil

}

func (t *TestRepo) Update(_ context.Context, req repo.Request) error {
	for i, d := range *t {
		if d.ID == req.ID {
			newDtl := repo.Details{
				ID:     req.ID,
				Param1: req.Param1,
				Param2: req.Param2,
				Param3: req.Param3,
			}
			(*t)[i] = newDtl
			break
		}
	}
	return nil
}

func (t *TestRepo) List(_ context.Context, req repo.Request) ([]repo.Details, error) {

	resp := []repo.Details{}
	for _, d := range *t {
		if d.ID == req.ID {
			resp = append(resp, d)
		}
	}
	return resp, nil
}

func (t *TestRepo) Delete(_ context.Context, req repo.Request) error {
	for i, d := range *t {
		if d.ID == req.ID {
			*t = append((*t)[:i], (*t)[(i+1):]...)
		}
	}
	return nil
}

func (t *TestRepo) Close() {

}
